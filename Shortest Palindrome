https://leetcode.com/problems/shortest-palindrome/

class Solution:
    def shortestPalindrome(self, s: str) -> str:
        def generate_combs(s):
            lis = [s[::-1][0:j]+s for j in range(0, len(s))]
            lis.sort(key = len)
            return lis 
            
        def check_palindrome(s):
            lis = generate_combs(s)
            res = ''
            for i in lis:
                if i[::-1].lower()==i.lower():
                    res = i
                    break
                else:
                    res = " "
            return res
        
        result = check_palindrome(s)
        return result


Accepted Solution (with the help of chatgpt; my solution was getting memory limit exceeded for a test case, 120/123 test cases passed otherwise):

class Solution:
    def shortestPalindrome(self, s: str) -> str:
        if not s:
            return s
        
        rev_s = s[::-1]
        for i in range(len(s)):
            if s.startswith(rev_s[i:]):
                return rev_s[:i] + s
                
        return ""
